#BlueJ class context
comment0.target=Puzzle
comment1.params=filename
comment1.target=Puzzle(java.lang.String)
comment1.text=\r\n\ Creates\ the\ puzzle\ from\ file\ filename,\ and\ an\ empty\ solution.\r\n\ filename\ is\ assumed\ to\ hold\ a\ valid\ puzzle.\r\n
comment10.params=
comment10.target=void\ clear()
comment10.text=\r\n\ Clears\ all\ line\ segments\ out\ of\ the\ current\ solution.\r\n
comment2.params=
comment2.target=Puzzle()
comment2.text=\r\n\ Creates\ the\ puzzle\ from\ "eg3_1.txt".\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ size\ of\ the\ puzzle.\r\n
comment4.params=
comment4.target=int[][]\ getPuzzle()
comment4.text=\r\n\ Returns\ the\ number\ layout\ of\ the\ puzzle.\r\n
comment5.params=
comment5.target=boolean[][]\ getHorizontal()
comment5.text=\r\n\ Returns\ the\ state\ of\ the\ current\ solution,\ horizontally.\r\n
comment6.params=
comment6.target=boolean[][]\ getVertical()
comment6.text=\r\n\ Returns\ the\ state\ of\ the\ current\ solution,\ vertically.\r\n
comment7.params=lines
comment7.target=void\ parseFile(java.util.ArrayList)
comment7.text=\r\n\ Turns\ lines\ into\ a\ Slither\ Link\ puzzle.\r\n\ Each\ String\ holds\ one\ line\ from\ the\ input\ file.\ \r\n\ The\ first\ String\ in\ the\ argument\ goes\ into\ puzzle[0],\ \r\n\ The\ second\ String\ goes\ into\ puzzle[1],\ etc.\ \r\n\ lines\ is\ assumed\ to\ hold\ a\ valid\ square\ puzzle;\ see\ eg3_1.txt\ and\ eg5_1.txt\ for\ examples.\r\n
comment8.params=r\ c
comment8.target=void\ horizontalClick(int,\ int)
comment8.text=\r\n\ Toggles\ the\ horizontal\ line\ segment\ to\ the\ right\ of\ Dot\ r,c,\ if\ the\ indices\ are\ legal.\r\n\ Otherwise\ do\ nothing.\r\n
comment9.params=r\ c
comment9.target=void\ verticalClick(int,\ int)
comment9.text=\r\n\ Toggles\ the\ vertical\ line\ segment\ below\ Dot\ r,c,\ if\ the\ indices\ are\ legal.\r\n\ Otherwise\ do\ nothing.\r\n
numComments=11
